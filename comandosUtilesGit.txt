Comandos utiles de GIT:

git config --list   -> Muestra la configuracion actual de git

git config --list --show-origin  -> ver donde estan guardados los archivos de configuracion

--- Como no se a configurado el usurio, cuando se vaya a realizar un commit, git va a solicitar que este configurado, la configuracion se debe hacer de la siguiente manera
git config --global user.name "Frank Diaz"
git config --global user.email "frankd.diazr@gmail.com"

git int historia.txt-> inicializa el branch en la carpeta en la que se Esta
git add -> una vez hecho un cambio en un archiv, se usa este comando junto con el nombre del archivo para agregar estos cambios a Stagin (Aun no se ha hecho commit asi que no esta guardado todavia)

git add . -> este comando adiciona todos los archivos que esten en el directorio actual, importante poner el "." 

git rm --cached historia.txt -> borra un archivo que se ha adicionado a git pero no se ha dado commit, es importante darle la opcion --cached de lo contrario el archivo puede quedar en cache.

git commit -m "Primer commit del archivo"


----- Comandos para ver los cambios hechos a archivos


git log historia.txt -> Se ve la historia general de los cambios hechos en el/los archivos, mensaje del commit, autor y fecha.

git show historia.txt -> Muestra lo mismo de log mas las lineas que se cambiaron

git diff codigoCommit1 CodigoCommit2 -> el codigo de commit se obtiene con git log nombreArchivo

git log --all --graph --decorate --oneline" -> permite ver los cambios hechos por linea y una forma un poco mas grafica y facil de entender
----- Restaurar un commit anterior

git resel codigoCommit --hard -> vuelve a la version indicada y no guarda ningun cambio en stagging, si se a hecho un add se borran de stage, y borra cualquier cambio e historial de cambios hechos despues del comit indicado
git resel codigoCommit --soft -> vuelve a la version indicada y guarda ningun cambio en stagging, si se a hecho un add se borran de stage

-- Checkout

git checkout codigoCommit archvo -> esto lo que hace es traer la version del a un commit determinado, en este punto en el repositorio esta la ultima version, pero  la version del archivo local cambio a el contenido que tenia el archivo en el commit indicado, asi GIT va a detectar un cambio y si desea conservar este cambio se debe agrear con "add ." y dar un nuevo commit

-- git rm
A diferencia del git reset, este comando elimina el archivo indicado pero va a mantener el historial de los cambios hechos en git, con el git reset, borra el archivo y el historial de cambios hechos a el archivo indicado.

git rm rm --cached: Elimina los archivos de nuestro repositorio local y del area de staging, pero los mantiene en nuestro disco duro. Basicamente le dice a Git que deje de trackear el historial de cambios de estos archivos, por lo que pasaran a un estado untracked.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos mas avanzados).

-- git log  opciones de como funciona el comando
git log --oneline - Te muestra el id commit y el titulo del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el numero de lineas que se cambiaron brevemente.
git log -p- Explica el numero de lineas que se cambiaron y te muestra que se cambio en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el numero de commits.
git log --after="2018-1-2" ,
git log --after="today" y
git log --after="2018-1-2" --before="today" - Commits para localizar por fechas.
git log --author="Name Author" - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep="INVIE" - Busca los commits que cumplan tal cual esta escrito entre las comillas.
git log --grep="INVIE" -i- Busca los commits que cumplan sin importar mayusculas o minusculas.
git log - index.html- Busca los commits en un archivo en especifico.
git log -S "Por contenido"- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

-- Repositorios remotos

git clone url_del_servidor_remoto: Nos permite descargar los archivos de la ultima version de la rama principal y todo el historial de cambios en la carpeta .git.
git push: Luego de hacer git add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
git fetch: Lo usamos para traer actualizaciones del servidor remoto y guardarlas en nuestro repositorio local (en caso de que hayan, por supuesto).
git merge: Tambien usamos el comando git merge con servidores remotos. Lo necesitamos para combinar los ultimos cambios del servidor remoto y nuestro directorio de trabajo.
git pull: Basicamente, git fetch y git merge al mismo tiempo.


-- Agregar un repositorio remoto de github

-- https
git remote add origin https://github.com/frankddiazr/Hyperblog.git

-- Modificar http del origin
git remote set-url origin url_del_repositorio

-- verificar un nuevo origen
git remote
git remote -v  -> va a indicar mas detalles y muestra si se puede hacer un fetch/push..

-- Enviar una rama local al repositorio externo/origin
-- usuario:frankddiazr
-- Token generado -> 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
git push origin master -> Envie a "origin" (repositorio remoto) la rama (branch) master que esta en el equipo local
----------------------------------------------------------------
---- Proceso para la ceracion de llaves publicas y privadas
----------------------------------------------------------------
ssh-keygen -t rsa -b 4096 -C "frankd.diazr@gmail.com" -> este correo debe ser el cual esta asociado a la cuenta de github
va a pedir un passphrase que es un password con espacios
passprhase:password github
La carpeta donde quedo guardada la llave es en C:\Users\Frank\.ssh, alli van a haber dos archivos, la llave privada y la llave publica, para diferenciarlas, la llave publica tiene una extension .pub
-- Llave publica
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDGSm8foztNBlKLRI+pZG6nYMhNoQNIDZxitAK0e4D3rO/4wl01Nsl2I5v5eyy4kwN+1SySNrarE2GcCTfyux0Ry58oNrv/Qtnb7LPpvIkziFjcdRl16T8srALp8nbx5sVkF0zhgBKidVT/1SjowmCU/2e+c6DRP7ZZWGtBl8qMwP5vBJIBWpcPJ56L9BZzgHI+e4+K2sr133ogyuaCIUh0X/uCqy5Ru7aqPchJwixiMfnPbSiKyAYQitxnDBASYbMbsBzUbUxTpIzvq+LFarVAecZGC6xjCA5kEci6ikg80oXpUK4zIaklBFpC3tEE70iAGGdSvUopdRnCs90oK+O/bU53tk4OLd95sRS4aZZVu74zg2xH4LeyxQSnchM+EgkhZCJKPOWLchRUCNkHsl/UjvhrYq6BEXc8BKP93kltkzVioCa16tLhwZN1WOEtIxBoHhdEWuKc+UG5RaZTrLZaSkZLdvBddPn7HDQXmb3y80qiXInL+FxzBQrQBGOi9DxhStc0gxSckf6LRZVAUhq9efWVG/r01JHRMyog2tJGSCOulkoX6+P8xltQHROaPnWi8YIs6pXOmKgfomjliG7VFwo3WLeTzaq/6huXzDxx7zA14QVkC1AKL7i0nKrtYSeu8R+NgaG3EJqIdpdEJTALoq9LKyI21gg3+oy4e1l7Pw== frankd.diazr@gmail.com

-- 1. Se debe agregar la llave privada a el entorno donde se esta trabajando, esto para que pueda descifrar los mensajes que se envien mediante ssh 
eval $(ssh-agent -s) -> es para verificar que el processo de ssh-agent este corriendo en el sistema operativo
-- Output: Agent pid 1057

--2. Una vez se verifica que el proceso esta corriendo se debe agregar la llave PRIVADA a el ambiente
ssh-add ~/.ssh/id_rsa -> donde ~ es la variable que guarda la ruta del home donde se generaron las llaves, es decir es equivalente a C:\Users\Frank\

--3. Adicionar la llave publica al repositorio de github, cuenta, configuracion, llaves SSH y GPG, pegar el contenido del archivo .pub 
--4. Se debe ir al repositorio en el que se esta trabajando en git hub, click en code y seleccionar usar SSH en vez de https, copiar el codigo generado e ir al siguiente paso1
--5. Ahora se debe actualizar el repositorio remoto en el git local y se debe asignar el valor que genero github en el paso anterior
-- 5.1 Si el repositorio remoto ya esta creado, se debe modificar la url de este
   git remote set-url origin git@github.com:frankddiazr/Hyperblog.git -> origin es el repositorio remoto al cual se va a modificar, y el siguiente comando es lo que genero github en el paso anterior
-- 5.2 Si no hay un repositorio creado anteriormente usar el siguiente comando
   git remote add origin git@github.com:frankddiazr/Hyperblog.git -> origin es el repositorio remoto al cual se va a modificar, y el siguiente comando es lo que genero github en el paso anteriorp
-- 6. Para probar si todo se encuentra bien configurado, se puede realizar un Pull del origin y actualizar el repositorio local
git pull origin main
-- una vez hecho el cambio se procede a hacer el push a github
git push origin master:main
--------------------------------------------------------------------------------------------------------------------
-- 
